// app/api/process-payment/route.ts
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { sessionId, itemType, itemId, formData, amount, status } = body;

    if (!sessionId || !itemType || !itemId || !formData) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ –≤ Google Sheets
    const sheetsResponse = await fetch("/api/google-sheets", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        type: 'payment',
        data: {
          ...formData,
          itemType,
          itemId,
          amount,
          sessionId,
          paymentStatus: status,
        }
      })
    });

    if (!sheetsResponse.ok) {
      console.error('Failed to add data to Google Sheets');
    }

    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
    const isPaid = status === 'success';
    const statusEmoji = isPaid ? '‚úÖ' : '‚ùå';
    const statusText = isPaid ? '–û–ü–õ–ê–ß–ï–ù–û' : '–ù–ï –û–ü–õ–ê–ß–ï–ù–û';
    
    let telegramMessage = `${statusEmoji} **–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø** \\(${statusText}\\)\n\n`;
    telegramMessage += `üìù **–¢–∏–ø**: ${itemType === 'masterclass' ? '–ú–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å' : '–¢–æ–≤–∞—Ä'}\n`;
    telegramMessage += `üÜî **ID**: ${itemId}\n`;
    telegramMessage += `üë§ **–Ü–º\\'—è**: ${formData.fullName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    telegramMessage += `üìß **Email**: ${formData.email || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    telegramMessage += `üì± **WhatsApp**: ${formData.whatsapp || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    telegramMessage += `üè¢ **–ú—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏**: ${formData.workplace || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    telegramMessage += `üëî **–ü—Ä–æ—Ñ–µ—Å—ñ—è**: ${formData.profession || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    telegramMessage += `üí∞ **–°—É–º–∞**: ${amount / 100} PLN\n`;
    telegramMessage += `üÜî **Session ID**: ${sessionId}\n`;
    
    if (formData.invoiceNeeded) {
      telegramMessage += `\nüìã **–î–ê–ù–Ü –î–õ–Ø –§–ê–ö–¢–£–†–ò**:\n`;
      telegramMessage += `üè¢ **–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó**: ${formData.companyName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
      telegramMessage += `üî¢ **NIP**: ${formData.nip || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
      telegramMessage += `üìç **–ê–¥—Ä–µ—Å–∞**: ${formData.companyAddress || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
    const telegramResponse = await fetch("/api/send-telegram", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        message: telegramMessage
      })
    });

    if (!telegramResponse.ok) {
      console.error('Failed to send Telegram message');
    }

    // –Ø–∫—â–æ —Ü–µ –º–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å —ñ –ø–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–∏–π, –∑–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ü—å
    if (itemType === 'masterclass' && isPaid) {
      // –¢—É—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ—Å—Ü—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ –æ–∫—Ä–µ–º–∏–π API endpoint –∞–±–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      console.log(`Reducing available spots for masterclass ${itemId}`);
    }

    return NextResponse.json({
      success: true,
      message: 'Payment processed successfully',
      sheetsSuccess: sheetsResponse.ok,
      telegramSuccess: telegramResponse.ok
    });

  } catch (error) {
    console.error('Error processing payment:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}